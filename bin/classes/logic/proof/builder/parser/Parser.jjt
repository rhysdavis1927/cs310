options{  //Make lexer case insensitive
  IGNORE_CASE = true;  USER_TOKEN_MANAGER = true;  MULTI = true;  static = false;}PARSER_BEGIN(Parser)package logic.proof.builder.parser;import java.util.HashMap;public class Parser{  public static HashMap < String, Variable > variables;}PARSER_END(Parser)void Formula() #void :{  variables = new HashMap < String, Variable > ();}{  f1() < EOF >}void f1() #void :{}{  f2()  [fs()]  }void fs() #void :{}{  (    (      < IMPLIES > f2() #Implies(2) [fs()]  )|  (    < EQUIVALENT > f2() #Equivalent(2) [fs()]))}void f2() #void :{}{  f3()  (    (      < AND > f3()    ) #And(2)|  (    < OR > f3()  ) #Or(2))*}void f3() #void :{}{  Predicate()| < LBRACKET > f1() < RBRACKET >| < NOT > f3() #Not(1)| Quantifier()| Variable() < EQUALS > Variable() #Equals(2)}void Quantifier() #void :{  Token t;}{  (    t = < FORALL > f3()    {      jjtThis.jjtSetValue(new Variable(t.image.substring(1)));    }    #ForAll(1))|(  t = < THEREEXISTS > f3()  {    jjtThis.jjtSetValue(new Variable(t.image.substring(1)));  }  #ThereExists(1))}void Variable() #Variable :{  Token t;}{  t = < VARIABLE >  {    jjtThis.jjtSetValue(new Variable(t.image, variables));  }}void Predicate() #Predicate :{  Token t;}{  t = < PREDICATE >  {    jjtThis.jjtSetValue(new Predicate(t.image, variables));  }}