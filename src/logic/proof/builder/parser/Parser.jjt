options{  //Make lexer case insensitive
  IGNORE_CASE = true;  USER_TOKEN_MANAGER = true;  MULTI = true;  static = false;}PARSER_BEGIN(Parser)package logic.proof.builder.parser;public class Parser{}PARSER_END(Parser)/*Token :{	< Predicate : ["A"-"Z"](["a"-"z","A"-"Z"])* >}*/void Formula() #void :{}{  f1() < EOF >}void f1() #void :{}{  f2()  (    (      < IMPLIES > f2() #Implies(2)  )|  (    < EQUIVALENT > f2() #Equivalent(2)))*}void f2() #void :{}{  f3()  (    (      < AND > f3()    ) #And(2)|  (    < OR > f3()  ) #Or(2))*}void f3() #void :{}{  f4()| Not()| Quantifier()}void f4() #void :{}{  Predicate()|  (    < LBRACKET > f1() < RBRACKET >  )}void Not() #void :{}{  < NOT >  (    (      Not() #Not(1)  )|  (    f4() #Not(1)))}void Quantifier() #void :{}{  (    < FORALL >    (      (        Quantifier() #ForAll(1)    )  |    (      f4() #ForAll(1)  )))(  < THEREEXISTS >  (    (      Not() #ThereExists(1)  )|  (    f4() #ThereExists(1))))}void Predicate() #Predicate :{  Token t;}{  t = < PREDICATE >  {    jjtThis.jjtSetValue(new Predicate(t.image));  }}